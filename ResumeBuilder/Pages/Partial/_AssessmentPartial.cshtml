@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Options

@inject IViewLocalizer Localizer
@inject IOptions<RequestLocalizationOptions> LocOptions
@inject IStringLocalizer<ResumeBuilder.SharedResource> SharedLocalizer
@(Html.DevExtreme().Popup()
        .ID("assessment-popup")
        //.Width(400)
        .Height(470)
        .ShowCloseButton(true)
          .ShowTitle(true)
        .Title(SharedLocalizer["Assessments"])
    .RtlEnabled(CultureHelper.IsRighToLeft())
    .ShowCloseButton(true)
    .ContentTemplate(new TemplateName("apply-assessment-popup-template"))
)

@using (Html.DevExtreme().NamedTemplate("apply-assessment-popup-template"))
{
    @(Html.DevExtreme().ScrollView()
        .Width("100%")
        .Height("100%")
        .Content(@<text>
<div class="columns" >
    <div class="column" >
         @SharedLocalizer["JobseekerName"]
    </div>
    <div class="column is-three-fifths">
        <span id="assessment-jobseeker-name"></span>
    </div>
</div>
<div class="colums" >
    <div class="column" >
         @(Html.DevExtreme().DataGrid<ResumeBuilder.Dto.AnswerReport>()
                  .ID("answer-grid").RtlEnabled(CultureHelper.IsRighToLeft())
                   .ShowBorders(true).AllowColumnResizing(true).AllowColumnReordering(true)
                    .ShowRowLines(true).OnRowUpdating("onRowUpdating")
                    .RowAlternationEnabled(true)
                    .Editing(editing =>
                    {
                        editing.Mode(GridEditMode.Row);
                        editing.AllowUpdating(false);
                    })
                  .Paging(paging => paging.Enabled(false))
                  .Columns(columns =>
                  {
                      columns.AddFor(m => m.JobSeekerID).Visible(false).AllowEditing(true);
                      columns.AddFor(m => m.TemplateName).Caption(SharedLocalizer["AssessmentName"]).AllowEditing(false);
                      columns.AddFor(m => m.Question).Caption(SharedLocalizer["Question"]).AllowEditing(false);
                      columns.AddFor(m => m.DefaultAnswer).Caption(SharedLocalizer["DefaultAnswer"]).AllowEditing(false);
                      columns.AddFor(m => m.DefaultAnswerAr).Caption(SharedLocalizer["DefaultAnswerAr"]).AllowEditing(false);
                      columns.AddFor(m => m.Weightage).Caption(SharedLocalizer["Weight"]).AllowEditing(false);
                      columns.AddFor(m => m.Answer).Caption(SharedLocalizer["UserAnswer"]).AllowEditing(true);
                      columns.AddFor(m => m.Score).Caption(SharedLocalizer["Score"]).AllowEditing(false);
                  })
                  .DataSource(d => d.Mvc().Controller("AssessmentNonApi").LoadAction("GetAllAnswers").LoadParams(new { jobSeekerID = new JS("getResumeId"), templateID = new JS("getTemplateId") })
                 // .UpdateAction("UpdateAnswer")
                  // .UpdateMethod("UpdateAnswer")             
                  .Key("QuestionID"))
                  .Summary(s=>s.TotalItems(items => {
                      items.AddFor(m => m.Weightage).SummaryType(SummaryType.Count);
                      items.AddFor(m => m.Score).SummaryType(SummaryType.Sum);
                  }))

                  )

    </div>
</div>
</text>)
)
}

<script>
    function onRowUpdating(e) {
        for (var property in e.oldData) {
            if (!e.newData.hasOwnProperty(property)) {
                // add a non-existing value  
                e.newData[property] = e.oldData[property];
            }
        }
    }  
</script>



